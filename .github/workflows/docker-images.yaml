---
# yamllint disable rule:line-length
name: Build and Push Multi-Platform Docker Image

on:
  push:
  pull_request:
    branches: [main]
    types:
      [opened, reopened, synchronize]

env:
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  prepare-variables:
    runs-on: ubuntu-latest
    steps:
      - id: tag_build_number
        run: echo "tag=$(echo '${{github.ref_name}}' | tr -cs 'a-zA-Z0-9' '-')$(date +'%Y%m%d%H%M%S')-${{ github.run_number }}" >> "$GITHUB_OUTPUT"
      - id: tag_snapshot
        run: echo "tag=$(echo '${{github.ref_name}}' | tr -cs 'a-zA-Z0-9' '-')snapshot" >> "$GITHUB_OUTPUT"
    outputs:
      tag_build_number: ${{ steps.tag_build_number.outputs.tag }}
      tag_snapshot: ${{ steps.tag_snapshot.outputs.tag }}
  build-and-push:
    runs-on: ubuntu-latest
    needs: prepare-variables
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and load test core-image
        uses: docker/build-push-action@v6
        with:
          load: true
          tags: |
            ghcr.io/netcracker/qubership/core-base:test
          file: Dockerfile.base-alpine
          platforms: linux/amd64

      - name: Build and load image bases on core-image test
        uses: docker/build-push-action@v6
        with:
          load: true
          tags: |
            ghcr.io/netcracker/qubership/core-base-image:test
          file: ./core-base-image-test/Dockerfile
          platforms: linux/amd64

      - name: Build and load test java-image
        uses: docker/build-push-action@v6
        with:
          load: true
          tags: |
            ghcr.io/netcracker/qubership/java-base:test
          file: Dockerfile.java-alpine
          platforms: linux/amd64

      - name: Prepare test resources
        run: |
          echo "HOST_IP=$(hostname -I | awk '{print $2}')" >> $GITHUB_ENV
          openssl genpkey -algorithm RSA -out testcert_key.pem -pkeyopt rsa_keygen_bits:2048
          openssl req -x509 -newkey rsa:2048 -keyout testcert_key.pem -out testcert.pem -days 365 -nodes -subj "/CN=testcerts.com"
          openssl req -x509 -key testcert_key.pem -out test-k8s-ca.crt -days 365 -nodes -subj "/CN=testcerts.com"
          openssl req -x509 -newkey rsa:4096 -days 365 -nodes -keyout key.pem -out cert.pem -subj "/CN=host.docker.internal" -addext "subjectAltName = DNS:host.docker.internal"
          mkdir certs
          mv testcert.pem key.pem cert.pem certs/

      - name: Start HTTPS server on host
        run: |
          nohup openssl s_server -cert cert.pem -key key.pem -accept 0.0.0.0:8084 > server.log 2>&1 &
          sleep 5 
          cat server.log
          
      - name: Validate Truststore
        run: |
          docker run -v ./certs/:/tmp/cert/ -e CERTIFICATE_FILE_PASSWORD=testit --rm ghcr.io/netcracker/qubership/java-base:test \
            keytool -v -list -keystore /etc/ssl/certs/java/cacerts -storepass testit -alias testcert.pem

      - name: Validate ca certificates were copied to store and work
        run: |
          netstat -tuln | grep 8084

          docker run -v ./certs/:/tmp/cert/ -e TEST_URL=https://host.docker.internal:8084/ --rm --network=host --add-host=host.docker.internal:${{ env.HOST_IP }} ghcr.io/netcracker/qubership/core-base-image:test

      - name: Validate kubernetes ca certificate
        run: |
          docker run -v ./test-k8s-ca.crt:/var/run/secrets/kubernetes.io/serviceaccount/ca.crt --rm ghcr.io/netcracker/qubership/core-base:test cat /etc/ssl/certs/ca-certificates.crt | awk -v decoder='openssl x509 -noout -subject -enddate 2>/dev/null' '/BEGIN/{close(decoder)};{print | decoder}' | grep testcerts.com
          docker run -v ./test-k8s-ca.crt:/var/run/secrets/kubernetes.io/serviceaccount/ca.crt --rm ghcr.io/netcracker/qubership/java-base:test keytool -cacerts -storepass changeit -v -list | grep testcerts.com

      - name: Set up JDK 21
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4
        with:
          distribution: zulu
          java-version: 21
          server-id: central

      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Test profiler integration
        working-directory: test-profiler
        # language=bash
        run: |
          ./mvnw --batch-mode verify -Dqubership.profiler.java-base-image.tag=ghcr.io/netcracker/qubership/java-base:test

      - name: Build and push java-image
        uses: docker/build-push-action@v6
        with:
          push: ${{ !startsWith(github.ref, 'refs/heads/dependabot/') }}
          tags: |
            ghcr.io/netcracker/qubership/java-base:${{ needs.prepare-variables.outputs.tag_snapshot }}
            ghcr.io/netcracker/qubership/java-base:${{ needs.prepare-variables.outputs.tag_build_number }}
          file: Dockerfile.java-alpine
          platforms: ${{ env.PLATFORMS }}

      - name: Build and push core-image
        uses: docker/build-push-action@v6
        with:
          push: ${{ !startsWith(github.ref, 'refs/heads/dependabot/') }}
          tags: |
            ghcr.io/netcracker/qubership/core-base:${{ needs.prepare-variables.outputs.tag_snapshot }}
            ghcr.io/netcracker/qubership/core-base:${{ needs.prepare-variables.outputs.tag_build_number }}
          file: Dockerfile.base-alpine
          platforms: ${{ env.PLATFORMS }}
